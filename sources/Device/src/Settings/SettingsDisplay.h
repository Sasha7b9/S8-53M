#pragma once
#include "common/Display/Colors_.h"


#define BRIGHTNESS_GRID             (set.display.brightnessGrid)                // SettingsDisplay.brightnessGrid

#define DISPLAY_COLOR(num)          (set.display.colors[num])                   // SettingsDisplay.colors

#define ENUM_AVE                    (set.display.enumAve)                       // SettingsDisplay.enumAve
#define NUM_AVE                     (1 << ENUM_AVE)                             // Количество усреднений.

#define MODE_AVE                    (set.display.modeAve)                       // SettingsDisplay.modeAve

#define ENUM_MIN_MAX                (::set.display.enumMinMax)                  // SettingsDisplay.enumMinMax
#define NUM_MIN_MAX                 (1 << ENUM_MIN_MAX)                         // Количество измерений сигналов для расчёта минимумов и максимумов.

#define ENUM_SIGNALS_IN_SEC         (set.display.enumSignalsInSec)              // SettingsDisplay.enumSignalsInSec

#define MENU_AUTO_HIDE              (set.display.menuAutoHide)                  // SettingsDisplay.menuAutoHide

#define SHOW_STRING_NAVIGATION      (set.display.showStringNavigation)          // SettingsDisplay.showStringNavigation

// Настройки изображения
struct SettingsDisplay
{
    int16               time_show_levels;      // Время, в течение которого нужно показывать уровни смещения.
    int16               shift_in_memory;       // Показывает смещение левого края сетки относительно нулевого байта
                                               // памяти. Нужно для правильного отображения сигнала в окне.
    int16               time_messages;         // Время в секундах, на которое сообщение остаётся на экране.
    int16               brightness;            // Яркость дисплея.
    int16               brightnessGrid;        // Яркость сетки от 0 до 100.
    uint                colors[16];            // Цвета.
    ModeDrawSignal::E   mode_draw_signal;      // Режим отрисовки сигнала.
    TypeGrid::E         typeGrid;              // Тип сетки.
    ENumAccumulation::E enum_accum;            // Перечисление накоплений сигнала на экране.
    ENumAveraging::E    enumAve;               // Перечисление усреднений сигнала.
    ModeAveraging::E    modeAve;               // Тип усреднений по измерениям.
    ENumMinMax::E       enumMinMax;            // Число измерений для определения минимумов и максимумов.
    Smoothing::E        smoothing;             // Число точек для скользящего фильтра.
    ENumSignalsInSec::E enumSignalsInSec;      // Перечисление считываний сигнала в секунду.
    Channel::E          last_affected_channel; // Здесь хранится номер последнего канала, которым управляли ручками.
                                               // Нужно для того, чтобы знать, какой сигнал рисовать наверху.
    ModeAccumulation::E mode_acum;             // Задаёт режим накопления сигналов.
    AltMarkers::E       alt_markers;           // Режим отображения дополнительных боковых маркеров смещений.
    MenuAutoHide::E     menuAutoHide;          // Через сколько времени после последнего нажатия клавиши прятать меню.
    bool                showFullMemoryWindow;  // Показывать ли окно памяти вверху экрана. \todo Не используется.
    bool                showStringNavigation;  // Показывать ли строку текущего состояния меню..
    LinkingRShift::E    linking_rshift;        // Тип привязки смещения по вертикали.

    // Возвращает адрес первой и последней точки на экране.
    static void PointsOnDisplay(int *firstPoint, int *lastPoint);

    // Если экран разделён на две части и основной сигнал выводится сверху - например, в режиме вывода спектра
    static bool IsSeparate();
};

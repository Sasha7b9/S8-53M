#pragma once
#include "Menu/Items/MenuItems.h"
#include "Settings/SettingsChannel.h"
#include "Settings/SettingsDisplay.h"
#include "Settings/SettingsMemory.h"
#include "Settings/SettingsService.h"
#include "Settings/SettingsCursors.h"
#include "Settings/SettingsDebug.h"
#include "Settings/SettingsMemory.h"
#include "Settings/SettingsMeasures.h"
#include "Settings/SettingsMath.h"
#include "Utils/Measures.h"


#define SOUND_ENABLED       (set.service.soundEnabled)          // SettingsService.soundEnabled

#define RSHIFT_ADD(ch, range, closed) set.chan[ch].rShiftAdd[range][closed]


 
 // Настройки каналов
struct SettingsChannel
{
    float         stretchADC;                 // Поправочный коэффициент.
    int16         rShiftRel;
    int16         rShiftAdd[Range::Count][2]; // Добавочное смещение для открытого (0) и закрытого (1) входов.
    ModeCouple::E modeCouple;                 // Режим по входу.
    Divider::E    divider;                    // Множитель.
    Range::E      range;                      // Масштаб по напряжению.
    bool          enable;                     // Включён ли канал.
    bool          inverse;                    // Инвертирован ли канал.
    bool          filtr;                      // Фильтр
    int8          balanceShiftADC;            // Добавочное смещение для балансировки АЦП.
};




#define MAC_ADDR0       (set.eth.mac0)
#define MAC_ADDR1       (set.eth.mac1)
#define MAC_ADDR2       (set.eth.mac2)
#define MAC_ADDR3       (set.eth.mac3)
#define MAC_ADDR4       (set.eth.mac4)
#define MAC_ADDR5       (set.eth.mac5)
//
#define IP_ADDR0        (set.eth.ip0)
#define IP_ADDR1        (set.eth.ip1)
#define IP_ADDR2        (set.eth.ip2)
#define IP_ADDR3        (set.eth.ip3)
//
#define PORT_ETH        (set.eth.port)
//
#define NETMASK_ADDR0   (set.eth.mask0)
#define NETMASK_ADDR1   (set.eth.mask1)
#define NETMASK_ADDR2   (set.eth.mask2)
#define NETMASK_ADDR3   (set.eth.mask3)
//
#define GW_ADDR0        (set.eth.gw0)
#define GW_ADDR1        (set.eth.gw1)
#define GW_ADDR2        (set.eth.gw2)
#define GW_ADDR3        (set.eth.gw3)
//
#define ETH_ENABLE      (set.eth.enable)


struct SettingsEthernet
{
    uint8 mac0;
    uint8 mac1;
    uint8 mac2;
    uint8 mac3;
    uint8 mac4;
    uint8 mac5;

    uint8 ip0;
    uint8 ip1;
    uint8 ip2;
    uint8 ip3;

    uint16 port;

    uint8 mask0;
    uint8 mask1;
    uint8 mask2;
    uint8 mask3;

    uint8 gw0;
    uint8 gw1;
    uint8 gw2;
    uint8 gw3;

    bool enable;
};



#define LANG            (set.common.lang)       // SettingsCommon.lang
#define LANG_RU         (LANG == Language::Russian)
#define LANG_EN         (LANG == Language::English)
                                    
struct SettingsCommon
{
    int         countEnables;               // Количество включений. Увеличивается при каждом включении.
    int         countErasedFlashData;       // Сколько раз стирался первый сектор с ресурсами.
    int         countErasedFlashSettings;   // Сколько раз стирался сектор с настройкаи.
    int         workingTimeInSecs;          // Время работы в секундах.
    Language::E lang;                       // Язык меню.
};



struct OutputRegisters
{
    bool    all;            // Показывать значения всех регистров.
    bool    flag;           // Выводить ли флаг готовности.
    bool    rShiftA;
    bool    rShiftB;
    bool    trigLev;
    bool    range[2];
    bool    chanParam[2];
    bool    trigParam;
    bool    tShift;
    bool    tBase;
};



#define NUM_STRINGS                         (set.debug.numStrings)

#define SIZE_FONT_CONSOLE                   (set.debug.sizeFont)

#define CONSOLE_IN_PAUSE                    (set.debug.consoleInPause)

#define BALANCE_ADC_TYPE                    (set.debug.balanceADCtype)
#define BALANCE_ADC_TYPE_IS_HAND            (BALANCE_ADC_TYPE == BalanceADCtype::Hand)

#define BALANCE_ADC(ch)                     (set.debug.balanceADC[ch])
#define BALANCE_ADC_A                       (BALANCE_ADC(ChA))
#define BALANCE_ADC_B                       (BALANCE_ADC(ChB))

#define DEBUG_STRETCH_ADC_TYPE              (set.debug.stretchADCtype)
#define DEBUG_STRETCH_ADC_TYPE_IS_DISABLED  (DEBUG_STRETCH_ADC_TYPE == StretchADCtype::Disable)
#define DEBUG_STRETCH_ADC_TYPE_IS_HAND      (DEBUG_STRETCH_ADC_TYPE == StretchADCtype::Hand)
#define DEBUG_STRETCH_ADC_TYPE_IS_SETTINGS  (DEBUG_STRETCH_ADC_TYPE == StretchADCtype::Settings)

#define DEBUG_STRETCH_ADC(ch)               (set.debug.stretchADC[ch])
#define DEBUG_STRETCH_ADC_A                 (DEBUG_STRETCH_ADC(ChA))
#define DEBUG_STRETCH_ADC_B                 (DEBUG_STRETCH_ADC(ChB))

#define NUM_MEAS_FOR_GATES                  (set.debug.numMeasuresForGates)

#define ADD_SHIFT_T0                        (set.debug.shiftT0)

#define SHOW_STATS                          (set.debug.showStats)

#define NUM_AVE_FOR_RAND                    (::set.debug.numAveForRand)


#define IP_ADDRESS          (set.service.IPaddress)             // SettingsService.IPaddress

// Настройки меню СЕРВИС.
struct SettingsService
{ //-V802
    bool              screenWelcomeEnable; // Будет ли показываться экран приглашения при включении прибора. \todo убрать этот артефакт.
    bool              soundEnabled;        // Включены ли звуки.
    CalibratorMode::E calibrator;          // Режим работы калибратора.
    int8              IPaddress;           // IP-адрес (временно).
    ColorScheme::E    colorScheme;         // Цветовая схеама.
};


// Настройки синхронизации
struct SettingsTrig
{
    StartMode::E         startMode;          // Режим запуска.
    TrigSource::E        source;             // Источник.
    TrigPolarity::E      polarity;           // Тип синхронизации.
    TrigInput::E         input;              // Вход синхронизации.
    int16                levelRel[3];        // Уровень синхронизации для трёх источников.
    ModeLongPressTrig::E modeLongPressTrig;  // Режим работы длительного нажатия кнопки СИНХР.
    TrigModeFind::E      modeFind;           // Поиск синхронизации - вручную или автоматически.
};


// Настройки оси X.
struct SettingsTime
{ //-V802
    TBase::E            tBase;          // Масштаб по времени.
    int16               tShiftRel;      // Смещение по времени.
    FunctionTime::E     function_time;
    TPos::E             tPos;           // Привязка синхронизации к памяти.
    SampleType::E       sampleType;     // Тип выборки для режима рандомизатора.
    PeackDetMode::E     peakDet;        // Режим работы пикового детектора
    bool                selfRecorder;   // Включен ли режим самописца.
    ENUM_POINTS_FPGA::E oldNumPoints;   // \brief Когда переключаемся в режим пикового детектора, устанавливаем
                                        // количество точек в 1024, а сюда  записываем то, что было, чтобы потом
                                        // восстановить.
};


// Отладочные настройки.
struct SettingsDebug
{
    int16             numStrings;                 // Число строк в консоли.
    int8              sizeFont;                   // Размер шрифта консоли - 0 - 5, 1 - 8,
    bool              consoleInPause;             // \brief Признак того, что консоль находится в режиме паузы. Режим паузы означает, что новые 
                                                  // сообщения она не записывает и не сохраняет.
    BalanceADCtype::E balanceADCtype;             // Тип балансировки.
    int16             balanceADC[2];              // Значение дополнительного смещения АЦП для ручной балансировки.
    StretchADCtype::E stretchADCtype;             // Тип растяжки канала.
    int16             stretchADC[2];              // Значение растяжки канала для ручного режима.
    int16             numMeasuresForGates;        // Число измерений для ворот.
    int16             shiftT0;                    // Дополнительное смещение по времени для данной развёртки режима рандомизатора.
    bool              showStats;                  // Показывать статистику на экране (fps, например).
    int16             numAveForRand;              // По скольким измерениям усреднять сигнал в режиме рандомизатора.
    bool              viewAlteraWrittingData;     // Показывать ли данные, идущие в альтеру.
    bool              viewAllAlteraWrittingData;  // \brief Показывать ли все данные, идущие в альтеру (если false, то постоянно идущие команды вроде 
                                                  // START, STOP не показываются).
    int16             altShift;                   // Добавочное смещение для устранения эффекта горизонтальной помехи синхронизации.
    int16             pretriggered;               // Регулируемая величина предзапуска для исследования рандомизатора.
    OutputRegisters   showRegisters;
};

struct SettingsMenu
{
    bool        pageDebugActive;                  // Активна ли кнопка отладки в меню.
    unsigned    isShown : 1;                      // Меню показано.
};


// Струкура хранит все настройки прибора.
struct Settings
{
    uint                size;
    SettingsDisplay     display;            // настройки изображения          (меню ДИСПЛЕЙ).
    SettingsChannel     chan[NumChannels];  // настройки каналов              (меню КАНАЛ 1 и КАНАЛ 2).
    SettingsTrig        trig;               // настройки синхронизации        (меню СИНХР).
    SettingsTime        time;               // временнЫе настройки            (меню РАЗВЁРТКА).
    SettingsCursors     cursors;            // настройки курсорных измерений  (меню КУРСОРЫ).
    SettingsMemory      memory;             // настройки режимов памяти       (меню ПАМЯТЬ).
    SettingsMeasures    measures;           // настройки измерений            (меню ИЗМЕРЕНИЯ).
    SettingsMath        math;               // настройки режима математических измерений.
    SettingsService     service;            // дополнительные настройки       (меню СЕРВИС).
    SettingsEthernet    eth;                // настройки для соединения по локальной сети.
    SettingsCommon      common;             // системные настройки.
    SettingsMenu        menu;               // состояние меню.
    SettingsDebug       debug;              // настройки режима отладки       (меню ОТЛАДКА).
    uint                crc32;              // контрольная сумма. Используется для проверки корректности сохранённых настроек
    //int temp[5];
    static void Load(bool _default);  // \brief Загрузить настройки. Если _default == true, загружаются настройки по умолчанию, иначе пытается 
                                      // загрузить настройки из ПЗУ, а в случае неудачи - тоже настройки по умолчанию.
    static void Save();               // Сохранить настройки во флеш-память.
    static bool DebugModeEnable();    // Возвращает true, если включён режим отладки.
    static bool loaded;    // Эта переменная нужна для того, чтобы исключить ложную запись пустых настроек из-за неправильного 
                                        // включения прибора (при исключённом из схемы программном включении иногда сигнал от кнопки отключения 
                                        // питания приходит быстрее, чем программа успевает настроить настройки).
};

extern Settings set;
